def userInput
def buildVersion = ''
def git_url = 'https://github.com/bh-ent-tech/fastlca-app-v2.git' // update gitrepo details accordingly in git_url variable to checkout the code.
def to_list = 'prafull.singh@bakerhughes.com,' // Please replace the to_list with required email ids.
pipeline{
    agent {
	    node{
            label 'BH-Sparq-Dev-2'
        }
	}
// customWorkspace to be defined in case of using clamav scan.    
    options {
    disableConcurrentBuilds()
    buildDiscarder(logRotator(numToKeepStr: '10', artifactNumToKeepStr: '30'))
  } 

    parameters {
        string(name: 'Major', defaultValue: '1', description: 'provide the Major version')
        string(name: 'Minor', defaultValue: '0', description: 'provide the Minor version')
	    string(name: 'Revision', defaultValue: '', description: 'Keep it empty if BuildType is Normal. Provide Revision if BulidType is Patch')
        choice(name: 'BuildType', choices: ['Normal','Patch'])
        string(name: 'image_build', defaultValue: 'fastlca-app-v2', description: 'provide the name of the image to be built')
	    string(name: 'registry_name', defaultValue: 'ghcr.io/bh-ent-tech', description: 'provide the docker registry name to push the image')
        string(name: 'Branch_to_Build', defaultValue: '', description: 'branch to be checked out for building the code')
    }
// define the credentials to be used according to the project requirements in environment.
    environment {
        cdecred = credentials('bh-git')
        gitcred = credentials('bh-git')
        version = '' 
        blackduck = credentials('fastlca-blackduck-token')    
    }
    stages{
        stage('Check prerequisites'){
            steps{
                script{
                    
	                    if ("${params.image_build}" == ''){
                        currentBuild.result = 'ABORTED'
                        error('Image name not provided !!!')
                    }
                }
            }
        }
// update gitrepo details accordingly in git_url to checkout the code.        
        stage("Git Checkout")
		{
            steps{
                git branch: "${Branch_to_Build}" , credentialsId: 'bh-git', url: "${git_url}"
            }
        }


        stage('Build and Sonar Scan')
		      {
           steps {
              withCredentials([file(credentialsId: 'npmrc-gitpkgs', variable: 'npmrc')])
			              {     
                sh '''             
                    echo ${WORKSPACE}
                    cat $npmrc>.npmrc
                    node -v
                    npm install
                    npm list
                    #npm test
                    npm run sonar
                    npm prune --production
                    npm pack
                    ''' 
                }
            } 
        } 

// use this stage for triggering the clamav scan for npm projects.
 /*     stage('Scanning the Artifacts using clamav scan')
        {  
            steps{
                script{
                
                sh '''
                pwd
                echo ${WORKSPACE}
                ls *.tgz | tee bldjars.txt
                cat bldjars.txt
                while IFS= read -r line; do 
                ls -l $line
                curl -s -XPOST https://clamav.np-0000169.npause1.bakerhughes.com/api/v1/scan -F FILES=@./${line} | jq . >> scan.out
                flg=$(grep -w "is_infected" scan.out | awk '{ print $2}'| sed 's/,//g')
                echo $flg 
                if [ -z "$flg" ];
                then
                {
                    echo 'No value in flg'  
                } 
                elif [ "$flg" == "true" ];
                then
                {
                    echo "Virus detected, hence aborting build. please check"
                    exit 1
                }
                elif [ "$flg" == "false" ];
                then
                {
                    echo "No Virus detected, hence proceeding build. "
                    
                }
                
                else
                    echo "None of the condition met"
                fi			
                done < bldjars.txt
                cat scan.out  
                '''
                }
            }
        }	

For clam AV scan report we need to trigger a freestyle job which will be scanning the artifacts present in the custom workspace defined in agents. 
Please refer avscan-report.doc within the documents folder for creating the freestyle job. 
Path to the freestyle job needs to be updated accordingly in build job in below stage.

       stage('Publish AV scan Report')
        {
            steps{
                build job: 'fastlca-app-v2-avscan-report',
		wait: false
              echo "This stage is to trigger downstream job to publish Antivirus Scan Report"
            }
        }
 */    
// use this stage to lint the dockerfile. If the path of Dockerfile is different update the commands accordingly, here we have dockerfile in base path.
 
    stage ("lint dockerfile") {
        agent {
            docker {
                image 'hadolint/hadolint:latest-debian'
                reuseNode true
            }
        }
        steps {
            sh 'hadolint ./Dockerfile | tee -a dockerfile_lint.txt'
        }
        post {
            always {
                archiveArtifacts 'dockerfile_lint.txt'
            }
        }
    }
	stage('black_duck'){
            steps{
            synopsys_detect '''  --blackduck.url='https://bakerhughes-test.app.blackduck.com'  --blackduck.api.token='$blackduck_PSW' --detect.project.name='fastlca-app-v2' --detect.project.group.name='FastLCA' --detect.project.version.name='1.0'  '''
            }
        }
        
/*Assuming the dockerfile is present in base path, otherwise update the build command accordingly.
This stage do the docker build, tag and push to registry. It creates a git tag and push it in github for builds from master or main branches. 
*/
        stage("Docker Image Build")
        {
            environment{
                giturl="${git_url}"
            }
            steps{
                script{
                wrap([$class: 'BuildUser']) {

		    sh '''
		    if [ "$BuildType" == "Normal" ]
			    then
				patch=0
			    fi
			    if [ "$BuildType" == "Patch" ]
			    then
				patch="$BUILD_NUMBER"
				BUILD_NUMBER=$Revision
			    fi
		      image_name=${registry_name}/${image_build}:v$Major.$Minor.$patch.$BUILD_NUMBER
		      version="v$Major.$Minor.$patch.$BUILD_NUMBER"
		      echo $version > buildversion.txt
              echo $image_name > image.txt
		    echo $image_name
		    docker login --username ${cdecred_USR} ${registry_name} --password ${cdecred_PSW}
		    docker build -t $image_name .
		    docker push $image_name
		    docker images
			if [ "$Branch_to_Build" == "master" ] || [ "$Branch_to_Build" == "main" ];
			    then {
		    echo "${giturl}"
		    git config --local user.name "Jenkins"
            git config --local credential.helper "!f() { echo username=\$gitcred_USR; echo password="\$gitcred_PSW"; }; f"
		    git tag -a "$version" -f -m "Created By:\${BUILD_USER} , branch:${Branch_to_Build}"
		    git push "${giturl}" "$version"
			}
			fi
		    '''
		    buildVersion = readFile('buildversion.txt').trim()
		    currentBuild.displayName = "$image_build:$buildVersion"
	    	  
            }
            }
            }
        }
  /*        stage('trivy scan') {
            steps {
                script {
            sh '''
            image_name="`cat image.txt 2>&1`"
            echo $image_name
            curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/html.tpl > html.tpl
            trivy image --ignore-unfixed --format template --template "@html.tpl" -o ${image_build}.html ${image_name}
            mkdir publish
            cp -r ${image_build}.html $WORKSPACE/publish
            '''
            publishHTML([
                    allowMissing: false,
                    alwaysLinkToLastBuild: false,
                    keepAll: true,
                    reportDir: 'publish',
                    reportFiles: '${image_build}.html',
                    reportName: 'Trivy Scan',
                    reportTitles: 'Trivy Scan'
                  ])
                    }
                }
            }
            
            stage('Cleanup') {
		    steps{
			script{
                  sh 'docker rmi "`cat image.txt 2>&1`"'
                }
            }
     }	  */  
/*
You can enable this stage if you want to update the image version in deployment repo. 
This stage will update the yaml files in github and deploy it using argocd. 
Please create the job with name update_deployment_manifest using the CD/Jenkinsfilecd-with-argocd-manifest-update script.
update_deployment_manifest job path needs to be updated accordingly.
	*/

        stage('Update Manifest'){
            steps {
                script {
                        echo "Proceeding with comitting the changes on GitHub..."
                        build job: '../update_deployment_manifest_dev', 
				parameters: [
          string(name: 'IMAGE_NAME', value: "${image_build}"), string(name: 'IMAGE_TAG', value: "${buildVersion}"), string(name: 'REGISTRY', value: "${registry_name}"), string(name: 'DIR_NAME', value: "DEV")],
          wait: false
                    }
                }
            }
  
        }
	// Workspace cleanup and email trigger
    post { 
        always { 
	emailext (
		attachmentsPattern: 'dockerfile_lint.txt',
                subject: " job status is  ${currentBuild.currentResult} for Job ${env.JOB_BASE_NAME} - Build # ${env.BUILD_NUMBER} ",
                body: """Status of ${env.JOB_BASE_NAME} BUILD # ${env.BUILD_NUMBER} is ${currentBuild.currentResult}, You can check console output at ${env.BUILD_URL}console
                """,
                to: "${to_list}"
            )
            cleanWs()
          }
    }
    }
